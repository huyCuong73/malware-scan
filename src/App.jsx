import { useState } from "react";
import reactLogo from "./assets/react.svg";
import viteLogo from "/electron-vite.animate.svg";
import "./App.css";
import fs from "fs";
const electron = window.require("electron");
import axios from "axios";

function App() {
    const { ipcRenderer } = electron;
    const [count, setCount] = useState(0);
    const [header, setHeader] = useState(1);

    const [filesScanned, setFilesScanned] = useState([])
    const [filesMatched, setFilesMatched] = useState([])
    let files = []
    let matchFiles = []
    let listFiles = [];


    console.log("file scan: ", filesScanned);

    function getFiles(folder, array, callback) {
        
        fs.readdir(folder, (err, files) => {
            if (err) {
                return callback(err);
            }

            if (files.length === 0) {
                return callback(null, array);
            }

            files.forEach((file) => {
                let filePath = folder + "/" + file;

                fs.stat(filePath, (err, stats) => {
                    if (err) {
                        return callback(err);
                    }

                    if (stats.isDirectory()) {
                        getFiles(filePath, array, (err, array) => {
                            if (err) {
                                return callback(err);
                            }

                            if (--files.length === 0) {
                                return callback(null, array);
                            }
                        });
                    } else {
                        array.push(filePath);

                        if (--files.length === 0) {
                            return callback(null, array);
                        }
                    }
                });
            });
        });
    }

    const openFolderDialog = () => {
        electron.ipcRenderer.send("open-folder-dialog");
    };

    ipcRenderer.on("folder-selected", (event, folderPath) => {

        getFiles(folderPath, listFiles, (err, array) => {
            if (err) {
                console.error(err);
            } else {
                console.log(array);
            }
        });
    });

    return (
        <div className="container">      
            <div className="action">
                <button
                    onClick={() => {
                        listFiles = []
                        openFolderDialog();
                    }}
                >
                    Select Folder
                </button>

                <button
                    onClick={async () => {
                        for (let i = 0; i < listFiles.length; i++) {
                            
                            const data = await axios.post("http://localhost:5000", {
                                filePath: listFiles[i],
                            });
                            if(data.data.matchedRules.length != 0)
                                matchFiles.push({
                                    path: data.data.filePath,
                                    severity: data.data.severity
                                })
                    
                            files.push(data.data.filePath)

                            setFilesScanned([...files]);
                            setFilesMatched([...matchFiles])
                        }
                    }}
                >
                    Scan
                </button>
            </div>

            <div className="main">
                <div className="mainHeader">
                    <div className={header == 1 ? "headerItem headerItemActive" : "headerItem"} onClick={() => setHeader(1)}>File</div>
                    <div className={header == 2 ? "headerItem headerItemActive" : "headerItem"} onClick={() => setHeader(2)}>Detection</div>
                    <div className={header == 3 ? "headerItem headerItemActive" : "headerItem"} onClick={() => setHeader(3)}>Details</div>
                </div>

                <div className="mainBody">
                    {
                        header == 1 &&
                        [...filesScanned].map((file,i) => (
                                <div className="file">
                                    {`${i+1}. ${file}`}
                                </div>
                            )
                        )
                    }

                    {
                        header == 2 &&
                        [...filesMatched].map((file,i) => (
                                <div className="file" style={{"backgroundColor": file.severity == "high" && "red"}}>
                                    {`${i+1}. ${file.path}`}
                                </div>
                            )
                        )
                    }

                </div>
            </div>
        </div>
    );
}

export default App;
